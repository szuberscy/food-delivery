package com.fszuberski.fooddelivery.user.registration.adapter.persistence

import org.jdbi.v3.core.HandleCallback
import org.jdbi.v3.core.Jdbi
import java.sql.SQLException

fun translate(sqlException: SQLException) =
    translations[sqlException.sqlState]?.invoke(sqlException) ?: sqlException

fun <R, X : Exception> Jdbi.withExceptionTranslatingHandle(callback: HandleCallback<R, X>): R =
    withTranslatedExceptions {
        withHandle(callback)
    }

fun <T> withTranslatedExceptions(block: () -> T): T =
    try {
        block()
    } catch (e: Exception) {
        when (val sqlException = tryUnwrappingSQLException(e)) {
            null -> throw e
            else -> throw translate(sqlException)
        }
    }

private fun tryUnwrappingSQLException(throwable: Throwable?): SQLException? {
    return when (throwable) {
        null -> null
        is SQLException -> throwable
        else -> tryUnwrappingSQLException(throwable.cause)
    }
}

// Generated by ChatGPT3.5, may contain errors
// TODO: check below code and map missing errors
// https://www.postgresql.org/docs/current/errcodes-appendix.html
private val translations = mapOf<String, (sqlException: SQLException) -> SQLException>(
    // Class 02 — No Data (this is also a warning class per the SQL standard)
    "02000" to { NoData(cause = it) },
    "02001" to { NoAdditionalDynamicResultSetsReturned(cause = it) },
    // Class 03 — SQL Statement Not Yet Complete
    "03000" to { SqlStatementNotYetCompleted(cause = it) },
    // Class 08 — Connection Exception TODO
    // Class 09 — Triggered Action Exception TODO
    // Class 0A — Feature Not Supported TODO
    // Class 0B — Invalid Transaction Initiation TODO
    // Class 0F — Locator Exception TODO
    // Class 0L — Invalid Grantor TODO
    // Class 0P — Invalid Role Specification TODO
    // Class 0Z — Diagnostics Exception TODO
    // Class 20 — Case Not Found TODO
    // Class 21 — Cardinality Violation TODO
    // Class 22 — Data Exception TODO
    "22001" to { StringDataRightTruncation(cause = it) },
    "22003" to { NumericValueOutOfRange(cause = it) },
    "22012" to { DivisionByZero(cause = it) },
    // Class 23 — Integrity Constraint Violation TODO
    "23000" to { CheckViolation(cause = it) },
    "23502" to { NotNullViolation(cause = it) },
    "23503" to { ForeignKeyViolation(cause = it) },
    "23505" to { UniqueViolation(cause = it) },
    // Class 24 — Invalid Cursor State TODO
    // Class 25 — Invalid Transaction State TODO
    // Class 26 — Invalid SQL Statement Name TODO
    // Class 27 — Triggered Data Change Violation TODO
    // Class 28 — Invalid Authorization Specification TODO
    // Class 2B — Dependent Privilege Descriptors Still Exist TODO
    // Class 2D — Invalid Transaction Termination TODO
    // Class 2F — SQL Routine Exception TODO
    // Class 34 — Invalid Cursor Name TODO
    // Class 38 — External Routine Exception TODO
    // Class 39 — External Routine Invocation Exception TODO
    // Class 3B — Savepoint Exception TODO
    // Class 3D — Invalid Catalog Name
    "3D000" to { InvalidCatalogName(cause = it) },
    // Class 3F — Invalid Schema Name
    "3F000" to { InvalidSchemaName(cause = it) },
    // Class 40 — Transaction Rollback TODO
    "40000" to { TransactionRollback(cause = it) },
    // Class 42 — Syntax Error or Access Rule Violation TODO
    "42501" to { InsufficientPrivilege(cause = it) },
    "42577" to { InvalidAuthorizationSpecification(cause = it) },
    "42601" to { SyntaxErrorOrAccessRuleViolation(cause = it) },
    "42602" to { InvalidName(cause = it) },
    "42603" to { SyntaxError(cause = it) },
    "42622" to { NameTooLong(cause = it) },
    "42702" to { AmbiguousColumn(cause = it) },
    "42703" to { UndefinedColumn(cause = it) },
    "42723" to { AmbiguousFunction(cause = it) },
    "42804" to { DatatypeMismatch(cause = it) },
    "42809" to { IndeterminateDatatype(cause = it) },
    "42883" to { UndefinedFunction(cause = it) },
    "42899" to { GeneratedAlways(cause = it) },
    "42939" to { ReservedName(cause = it) },
    "42P01" to { UndefinedTable(cause = it) },
    "42P04" to { DuplicateDatabase(cause = it) },
    "42P06" to { DuplicateSchema(cause = it) },
    "42P07" to { DuplicateTable(cause = it) },
    "42P10" to { InvalidColumnReference(cause = it) },
    "42P12" to { InvalidAlias(cause = it) },
    "42P13" to { InvalidAliasTarget(cause = it) },
    "42P15" to { WrongObjectType(cause = it) },
    "42P17" to { UndefinedTableFunction(cause = it) },
    "42P21" to { CollationMismatch(cause = it) },
    "42P22" to { IndeterminateCollation(cause = it) },
    // Class 44 — WITH CHECK OPTION Violation TODO
    // Class 53 — Insufficient Resources TODO
    // Class 54 — Program Limit Exceeded TODO
    // Class 55 — Object Not In Prerequisite State TODO
    // Class 57 — Operator Intervention TODO
    // Class 58 — System Error (errors external to PostgreSQL itself) }, TODO
    // Class 72 — Snapshot Failure TODO
    // Class F0 — Configuration File Error TODO
    // Class HV — Foreign Data Wrapper Error (SQL/MED) }, TODO
    // Class P0 — PL/pgSQL Error TODO
    // Class XX — Internal Error
    "XX000" to { InternalError(cause = it) },
    "XX001" to { DataCorrupted(cause = it) },
    "XX002" to { IndexCorrupted(cause = it) },
)

class NoData(
    message: String = "No data",
    errorCode: String = "02000",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class NoAdditionalDynamicResultSetsReturned(
    message: String = "No additional dynamic result sets returned",
    errorCode: String = "02001",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class SqlStatementNotYetCompleted(
    message: String = "SQL statement not yet completed",
    errorCode: String = "03000",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class StringDataRightTruncation(
    message: String = "String data right truncation",
    errorCode: String = "22001",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class NumericValueOutOfRange(
    message: String = "Numeric value out of range",
    errorCode: String = "22003",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class DivisionByZero(
    message: String = "Division by zero",
    errorCode: String = "22012",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class CheckViolation(
    message: String = "Check violation",
    errorCode: String = "23000",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class NotNullViolation(
    message: String = "Not null violation",
    errorCode: String = "23502",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class ForeignKeyViolation(
    message: String = "Foreign key violation",
    errorCode: String = "23503",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class UniqueViolation(
    message: String = "Unique violation",
    errorCode: String = "23505",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class InvalidCatalogName(
    message: String = "Invalid catalog name",
    errorCode: String = "3D000",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class InvalidSchemaName(
    message: String = "Invalid schema name",
    errorCode: String = "3F000",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class TransactionRollback(
    message: String = "Transaction rollback",
    errorCode: String = "40000",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class InsufficientPrivilege(
    message: String = "Insufficient privilege",
    errorCode: String = "42501",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class InvalidAuthorizationSpecification(
    message: String = "Invalid authorization specification",
    errorCode: String = "42577",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class SyntaxErrorOrAccessRuleViolation(
    message: String = "Syntax error or access rule violation",
    errorCode: String = "42601",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class InvalidName(
    message: String = "Invalid name",
    errorCode: String = "42602",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class SyntaxError(
    message: String = "Syntax error",
    errorCode: String = "42603",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class NameTooLong(
    message: String = "Name too long",
    errorCode: String = "42622",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class AmbiguousColumn(
    message: String = "Ambiguous column",
    errorCode: String = "42702",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class UndefinedColumn(
    message: String = "Undefined column",
    errorCode: String = "42703",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class AmbiguousFunction(
    message: String = "Ambiguous function",
    errorCode: String = "42723",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class DatatypeMismatch(
    message: String = "Datatype mismatch",
    errorCode: String = "42804",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class IndeterminateDatatype(
    message: String = "Indeterminate datatype",
    errorCode: String = "42809",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class UndefinedFunction(
    message: String = "Undefined function",
    errorCode: String = "42883",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class GeneratedAlways(
    message: String = "Generated always",
    errorCode: String = "42899",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class ReservedName(
    message: String = "Reserved name",
    errorCode: String = "42939",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class UndefinedTable(
    message: String = "Undefined table",
    errorCode: String = "42P01",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class DuplicateDatabase(
    message: String = "Duplicate database",
    errorCode: String = "42P04",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class DuplicateSchema(
    message: String = "Duplicate schema",
    errorCode: String = "42P06",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class DuplicateTable(
    message: String = "Duplicate table",
    errorCode: String = "42P07",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class InvalidColumnReference(
    message: String = "Invalid column reference",
    errorCode: String = "42P10",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class InvalidAlias(
    message: String = "Invalid alias",
    errorCode: String = "42P12",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class InvalidAliasTarget(
    message: String = "Invalid alias target",
    errorCode: String = "42P13",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class WrongObjectType(
    message: String = "Wrong object type",
    errorCode: String = "42P15",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class UndefinedTableFunction(
    message: String = "Undefined table function",
    errorCode: String = "42P17",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class CollationMismatch(
    message: String = "Collation mismatch",
    errorCode: String = "42P21",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class IndeterminateCollation(
    message: String = "Indeterminate collation",
    errorCode: String = "42P22",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class InternalError(
    message: String = "Internal error",
    errorCode: String = "XX000",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class DataCorrupted(
    message: String = "Data corrupted",
    errorCode: String = "XX001",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class IndexCorrupted(
    message: String = "Index corrupted",
    errorCode: String = "XX002",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)
