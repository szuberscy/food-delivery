package com.fszuberski.fooddelivery.user.registration.adapter.persistence
import java.sql.SQLException

// Generated by ChatGPT3.5, may contain errors
// TODO: check below code and map missing errors
// https://www.postgresql.org/docs/current/errcodes-appendix.html
class SQLExceptionMapper {

    fun mapErrorCode(sqlException: SQLException) {
        when (sqlException.sqlState) {
            // Class 02 — No Data (this is also a warning class per the SQL standard)
            "02000" -> throw NoData(cause = sqlException)
            "02001" -> throw NoAdditionalDynamicResultSetsReturned(cause = sqlException)
            // Class 03 — SQL Statement Not Yet Complete
            "03000" -> throw SqlStatementNotYetCompleted(cause = sqlException)
            // Class 08 — Connection Exception TODO
            // Class 09 — Triggered Action Exception TODO
            // Class 0A — Feature Not Supported TODO
            // Class 0B — Invalid Transaction Initiation TODO
            // Class 0F — Locator Exception TODO
            // Class 0L — Invalid Grantor TODO
            // Class 0P — Invalid Role Specification TODO
            // Class 0Z — Diagnostics Exception TODO
            // Class 20 — Case Not Found TODO
            // Class 21 — Cardinality Violation TODO
            // Class 22 — Data Exception TODO
            "22001" -> throw StringDataRightTruncation(cause = sqlException)
            "22003" -> throw NumericValueOutOfRange(cause = sqlException)
            "22012" -> throw DivisionByZero(cause = sqlException)
            // Class 23 — Integrity Constraint Violation TODO
            "23000" -> throw CheckViolation(cause = sqlException)
            "23502" -> throw NotNullViolation(cause = sqlException)
            "23503" -> throw ForeignKeyViolation(cause = sqlException)
            "23505" -> throw UniqueViolation(cause = sqlException)
            // Class 24 — Invalid Cursor State TODO
            // Class 25 — Invalid Transaction State TODO
            // Class 26 — Invalid SQL Statement Name TODO
            // Class 27 — Triggered Data Change Violation TODO
            // Class 28 — Invalid Authorization Specification TODO
            // Class 2B — Dependent Privilege Descriptors Still Exist TODO
            // Class 2D — Invalid Transaction Termination TODO
            // Class 2F — SQL Routine Exception TODO
            // Class 34 — Invalid Cursor Name TODO
            // Class 38 — External Routine Exception TODO
            // Class 39 — External Routine Invocation Exception TODO
            // Class 3B — Savepoint Exception TODO
            // Class 3D — Invalid Catalog Name
            "3D000" -> throw InvalidCatalogName(cause = sqlException)
            // Class 3F — Invalid Schema Name
            "3F000" -> throw InvalidSchemaName(cause = sqlException)
            // Class 40 — Transaction Rollback TODO
            "40000" -> throw TransactionRollback(cause = sqlException)
            // Class 42 — Syntax Error or Access Rule Violation TODO
            "42501" -> throw InsufficientPrivilege(cause = sqlException)
            "42577" -> throw InvalidAuthorizationSpecification(cause = sqlException)
            "42601" -> throw SyntaxErrorOrAccessRuleViolation(cause = sqlException)
            "42602" -> throw InvalidName(cause = sqlException)
            "42603" -> throw SyntaxError(cause = sqlException)
            "42622" -> throw NameTooLong(cause = sqlException)
            "42702" -> throw AmbiguousColumn(cause = sqlException)
            "42703" -> throw UndefinedColumn(cause = sqlException)
            "42723" -> throw AmbiguousFunction(cause = sqlException)
            "42804" -> throw DatatypeMismatch(cause = sqlException)
            "42809" -> throw IndeterminateDatatype(cause = sqlException)
            "42883" -> throw UndefinedFunction(cause = sqlException)
            "42899" -> throw GeneratedAlways(cause = sqlException)
            "42939" -> throw ReservedName(cause = sqlException)
            "42P01" -> throw UndefinedTable(cause = sqlException)
            "42P04" -> throw DuplicateDatabase(cause = sqlException)
            "42P06" -> throw DuplicateSchema(cause = sqlException)
            "42P07" -> throw DuplicateTable(cause = sqlException)
            "42P10" -> throw InvalidColumnReference(cause = sqlException)
            "42P12" -> throw InvalidAlias(cause = sqlException)
            "42P13" -> throw InvalidAliasTarget(cause = sqlException)
            "42P15" -> throw WrongObjectType(cause = sqlException)
            "42P17" -> throw UndefinedTableFunction(cause = sqlException)
            "42P21" -> throw CollationMismatch(cause = sqlException)
            "42P22" -> throw IndeterminateCollation(cause = sqlException)
            // Class 44 — WITH CHECK OPTION Violation TODO
            // Class 53 — Insufficient Resources TODO
            // Class 54 — Program Limit Exceeded TODO
            // Class 55 — Object Not In Prerequisite State TODO
            // Class 57 — Operator Intervention TODO
            // Class 58 — System Error (errors external to PostgreSQL itself) TODO
            // Class 72 — Snapshot Failure TODO
            // Class F0 — Configuration File Error TODO
            // Class HV — Foreign Data Wrapper Error (SQL/MED) TODO
            // Class P0 — PL/pgSQL Error TODO
            // Class XX — Internal Error
            "XX000" -> throw InternalError(cause = sqlException)
            "XX001" -> throw DataCorrupted(cause = sqlException)
            "XX002" -> throw IndexCorrupted(cause = sqlException)
            // Add more error codes and custom exception mappings as needed
            else -> throw sqlException // Default case
        }
    }
}

class NoData(
    message: String = "No data",
    errorCode: String = "02000",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class NoAdditionalDynamicResultSetsReturned(
    message: String = "No additional dynamic result sets returned",
    errorCode: String = "02001",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class SqlStatementNotYetCompleted(
    message: String = "SQL statement not yet completed",
    errorCode: String = "03000",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class StringDataRightTruncation(
    message: String = "String data right truncation",
    errorCode: String = "22001",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class NumericValueOutOfRange(
    message: String = "Numeric value out of range",
    errorCode: String = "22003",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class DivisionByZero(
    message: String = "Division by zero",
    errorCode: String = "22012",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class CheckViolation(
    message: String = "Check violation",
    errorCode: String = "23000",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class NotNullViolation(
    message: String = "Not null violation",
    errorCode: String = "23502",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class ForeignKeyViolation(
    message: String = "Foreign key violation",
    errorCode: String = "23503",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class UniqueViolation(
    message: String = "Unique violation",
    errorCode: String = "23505",
    cause: Throwable? = null
) : SQLException("$message (Error Code: $errorCode)", cause)

class InvalidCatalogName(
    message: String = "Invalid catalog name",
    errorCode: String = "3D000",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class InvalidSchemaName(
    message: String = "Invalid schema name",
    errorCode: String = "3F000",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class TransactionRollback(
    message: String = "Transaction rollback",
    errorCode: String = "40000",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class InsufficientPrivilege(
    message: String = "Insufficient privilege",
    errorCode: String = "42501",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class InvalidAuthorizationSpecification(
    message: String = "Invalid authorization specification",
    errorCode: String = "42577",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class SyntaxErrorOrAccessRuleViolation(
    message: String = "Syntax error or access rule violation",
    errorCode: String = "42601",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class InvalidName(
    message: String = "Invalid name",
    errorCode: String = "42602",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class SyntaxError(
    message: String = "Syntax error",
    errorCode: String = "42603",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class NameTooLong(
    message: String = "Name too long",
    errorCode: String = "42622",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class AmbiguousColumn(
    message: String = "Ambiguous column",
    errorCode: String = "42702",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class UndefinedColumn(
    message: String = "Undefined column",
    errorCode: String = "42703",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class AmbiguousFunction(
    message: String = "Ambiguous function",
    errorCode: String = "42723",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class DatatypeMismatch(
    message: String = "Datatype mismatch",
    errorCode: String = "42804",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class IndeterminateDatatype(
    message: String = "Indeterminate datatype",
    errorCode: String = "42809",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class UndefinedFunction(
    message: String = "Undefined function",
    errorCode: String = "42883",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class GeneratedAlways(
    message: String = "Generated always",
    errorCode: String = "42899",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class ReservedName(
    message: String = "Reserved name",
    errorCode: String = "42939",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class UndefinedTable(
    message: String = "Undefined table",
    errorCode: String = "42P01",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class DuplicateDatabase(
    message: String = "Duplicate database",
    errorCode: String = "42P04",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class DuplicateSchema(
    message: String = "Duplicate schema",
    errorCode: String = "42P06",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class DuplicateTable(
    message: String = "Duplicate table",
    errorCode: String = "42P07",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class InvalidColumnReference(
    message: String = "Invalid column reference",
    errorCode: String = "42P10",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class InvalidAlias(
    message: String = "Invalid alias",
    errorCode: String = "42P12",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class InvalidAliasTarget(
    message: String = "Invalid alias target",
    errorCode: String = "42P13",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class WrongObjectType(
    message: String = "Wrong object type",
    errorCode: String = "42P15",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class UndefinedTableFunction(
    message: String = "Undefined table function",
    errorCode: String = "42P17",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class CollationMismatch(
    message: String = "Collation mismatch",
    errorCode: String = "42P21",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class IndeterminateCollation(
    message: String = "Indeterminate collation",
    errorCode: String = "42P22",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class InternalError(
    message: String = "Internal error",
    errorCode: String = "XX000",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class DataCorrupted(
    message: String = "Data corrupted",
    errorCode: String = "XX001",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)

class IndexCorrupted(
    message: String = "Index corrupted",
    errorCode: String = "XX002",
    cause: Throwable? = null
) : SQLException(message, errorCode, cause)
